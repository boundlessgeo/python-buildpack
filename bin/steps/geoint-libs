#!/usr/bin/env bash

# This script serves as the GDAL build step of the
# [**Python Buildpack**](https://github.com/cloudfoundry/python-buildpack)
# compiler.
#
# This script is invoked by [`bin/compile`](/).

# The location of the pre-compiled cryptography binary.
VENDORED_GEOINT="https://s3.amazonaws.com/boundless-cloudfoundry/cflinuxfs2/geointlib-1.0.0-linux-x64.tar.gz"

PKG_CONFIG_PATH="/app/.heroku/vendor/lib/pkgconfig:$PKG_CONFIG_PATH"

# Syntax sugar.
source $BIN_DIR/utils

bpwatch start geoint_libs_install

# If GDAL exists within requirements, use vendored gdal.
if [[ "$BUILD_WITH_GEOINT_LIBRARIES" ]]; then

  if [ ! -f ".heroku/vendor/bin/proj" ]; then
    echo "-----> Bootstrapping GEOINT libs."
    mkdir -p .heroku/vendor
    # Download and extract cryptography into target vendor directory.
    curl $VENDORED_GEOINT -s | tar zxv -C .heroku/vendor &> /dev/null
  fi

  if [ -f "requirements.txt" ]; then
    sed -i '/django-auth-ldap/d' requirements.txt
    sed -i '/python-ldap/d' requirements.txt
    sed -i '/GDAL/d' requirements.txt
    echo 'GDAL==2.1.0' >> requirements.txt
  fi

  # Update env variables
  echo "-----> Building runtime environment."
  mkdir -p /app/.profile.d
  echo 'export LIBKML_LIBS="${LIBRARY_PATH}"' > /app/.profile.d/geoint.sh
  echo 'export GDAL_DATA="/app/.heroku/vendor/share/gdal"' >> /app/.profile.d/geoint.sh
  echo 'export PROJ_LIB="/app/.heroku/vendor/share/proj"' >> /app/.profile.d/geoint.sh
  echo 'export GEOS_LIBRARY_PATH="/app/.heroku/vendor/lib"' >> /app/.profile.d/geoint.sh
  echo 'export PYTHONPATH="/app/.heroku/vendor/python-geointlib/lib/python2.7/site-packages":"${PYTHONPATH}"' >> /app/.profile.d/geoint.sh
  echo 'export PATH="/app/.heroku/vendor/bin":"${PATH}"' >> /app/.profile.d/geoint.sh
  echo 'export LD_LIBRARY_PATH="/app/.heroku/vendor/lib":"${LD_LIBRARY_PATH}"' >> /app/.profile.d/geoint.sh
  echo "-----> Done."
fi

bpwatch stop geoint_libs_install
